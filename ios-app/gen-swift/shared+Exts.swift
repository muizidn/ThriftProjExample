/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public func ==(lhs: SharedStruct, rhs: SharedStruct) -> Bool {
  return
    (lhs.key == rhs.key) &&
    (lhs.value == rhs.value)
}

extension SharedStruct : CustomStringConvertible {

  public var description : String {
    var desc = "SharedStruct("
    desc += "key=\(String(describing: self.key)), "
    desc += "value=\(String(describing: self.value))"
    return desc
  }

}

extension SharedStruct : Hashable {

  public var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (key.hashValue)
    result = prime &* result &+ (value.hashValue)
    return result
  }

}

extension SharedStruct : TStruct {

  public static var fieldIds: [String: Int32] {
    return ["key": 1, "value": 2, ]
  }

  public static var structName: String { return "SharedStruct" }

  public static func read(from proto: TProtocol) throws -> SharedStruct {
    _ = try proto.readStructBegin()
    var key: Int32!
    var value: String!

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .i32):             key = try Int32.read(from: proto)
        case (2, .string):           value = try String.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(key, named: "key")
    try proto.validateValue(value, named: "value")

    return SharedStruct(key: key, value: value)
  }

}



fileprivate final class SharedService_getStruct_args {

  fileprivate var key: Int32


  fileprivate init(key: Int32) {
    self.key = key
  }

}

fileprivate func ==(lhs: SharedService_getStruct_args, rhs: SharedService_getStruct_args) -> Bool {
  return
    (lhs.key == rhs.key)
}

extension SharedService_getStruct_args : Hashable {

  fileprivate var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (key.hashValue)
    return result
  }

}

extension SharedService_getStruct_args : TStruct {

  fileprivate static var fieldIds: [String: Int32] {
    return ["key": 1, ]
  }

  fileprivate static var structName: String { return "SharedService_getStruct_args" }

  fileprivate static func read(from proto: TProtocol) throws -> SharedService_getStruct_args {
    _ = try proto.readStructBegin()
    var key: Int32!

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .i32):             key = try Int32.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(key, named: "key")

    return SharedService_getStruct_args(key: key)
  }

}



fileprivate final class SharedService_getStruct_result {

  fileprivate var success: SharedStruct?


  fileprivate init() { }
  fileprivate init(success: SharedStruct?) {
    self.success = success
  }

}

fileprivate func ==(lhs: SharedService_getStruct_result, rhs: SharedService_getStruct_result) -> Bool {
  return
    (lhs.success == rhs.success)
}

extension SharedService_getStruct_result : Hashable {

  fileprivate var hashValue : Int {
    let prime = 31
    var result = 1
    result = prime &* result &+ (success?.hashValue ?? 0)
    return result
  }

}

extension SharedService_getStruct_result : TStruct {

  fileprivate static var fieldIds: [String: Int32] {
    return ["success": 0, ]
  }

  fileprivate static var structName: String { return "SharedService_getStruct_result" }

  fileprivate static func read(from proto: TProtocol) throws -> SharedService_getStruct_result {
    _ = try proto.readStructBegin()
    var success: SharedStruct?

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (0, .struct):           success = try SharedStruct.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()

    return SharedService_getStruct_result(success: success)
  }

}



extension SharedServiceClient : SharedService {

  private func send_getStruct(key: Int32) throws {
    try outProtocol.writeMessageBegin(name: "getStruct", type: .call, sequenceID: 0)
    let args = SharedService_getStruct_args(key: key)
    try args.write(to: outProtocol)
    try outProtocol.writeMessageEnd()
  }

  private func recv_getStruct() throws -> SharedStruct {
    try inProtocol.readResultMessageBegin() 
    let result = try SharedService_getStruct_result.read(from: inProtocol)
    try inProtocol.readMessageEnd()

    if let success = result.success {
      return success
    }
    throw TApplicationError(error: .missingResult(methodName: "getStruct"))
  }

  public func getStruct(key: Int32) throws -> SharedStruct {
    try send_getStruct(key: key)
    try outProtocol.transport.flush()
    return try recv_getStruct()
  }

}

extension SharedServiceProcessor : TProcessor {

  static let processorHandlers: ProcessorHandlerDictionary = {

    var processorHandlers = ProcessorHandlerDictionary()

    processorHandlers["getStruct"] = { sequenceID, inProtocol, outProtocol, handler in

      let args = try SharedService_getStruct_args.read(from: inProtocol)

      try inProtocol.readMessageEnd()

      var result = SharedService_getStruct_result()
      do {
        result.success = try handler.getStruct(key: args.key)
      }
      catch let error { throw error }

      try outProtocol.writeMessageBegin(name: "getStruct", type: .reply, sequenceID: sequenceID)
      try result.write(to: outProtocol)
      try outProtocol.writeMessageEnd()
    }
    return processorHandlers
  }()

  public func process(on inProtocol: TProtocol, outProtocol: TProtocol) throws {

    let (messageName, _, sequenceID) = try inProtocol.readMessageBegin()

    if let processorHandler = SharedServiceProcessor.processorHandlers[messageName] {
      do {
        try processorHandler(sequenceID, inProtocol, outProtocol, service)
      }
      catch let error as TApplicationError {
        try outProtocol.writeException(messageName: messageName, sequenceID: sequenceID, ex: error)
      }
    }
    else {
      try inProtocol.skip(type: .struct)
      try inProtocol.readMessageEnd()
      let ex = TApplicationError(error: .unknownMethod(methodName: messageName))
      try outProtocol.writeException(messageName: messageName, sequenceID: sequenceID, ex: ex)
    }
  }
}

